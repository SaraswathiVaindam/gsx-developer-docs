{"version":3,"sources":["Typesense/SearchClient.js"],"names":["SearchClient","options","length","configuration","Configuration","_apiCall","ApiCall","multiSearch","MultiSearch","_individualCollections","collectionName","undefined","Error","Collection"],"mappings":"AAAA;;;;;;;;;;;;;AAEA;;AACA;;AACA;;AACA;;IAEqBA,Y;AACnB,wBAAaC,OAAb,EAAsB;AAAA;AACpBA,IAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB,CADoB,CAGpB;AACA;AACA;;AACA,QAAI,CAACA,OAAO,CAAC,QAAD,CAAP,IAAqB,EAAtB,EAA0BC,MAA1B,GAAmC,IAAvC,EAA6C;AAC3CD,MAAAA,OAAO,CAAC,wBAAD,CAAP,GAAoC,IAApC;AACD;;AAED,SAAKE,aAAL,GAAqB,IAAIC,sBAAJ,CAAkBH,OAAlB,CAArB;AACA,SAAKI,QAAL,GAAgB,IAAIC,gBAAJ,CAAY,KAAKH,aAAjB,CAAhB;AACA,SAAKI,WAAL,GAAmB,IAAIC,oBAAJ,CAAgB,KAAKH,QAArB,EAA+B,KAAKF,aAApC,EAAmD,IAAnD,CAAnB;AACA,SAAKM,sBAAL,GAA8B,EAA9B;AACD;;;;WAED,qBAAaC,cAAb,EAA6B;AAC3B,UAAIA,cAAc,KAAKC,SAAvB,EAAkC;AAChC,cAAM,IAAIC,KAAJ,CAAU,iGACd,kGADI,CAAN;AAED,OAHD,MAGO;AACL,YAAI,KAAKH,sBAAL,CAA4BC,cAA5B,MAAgDC,SAApD,EAA+D;AAC7D,eAAKF,sBAAL,CAA4BC,cAA5B,IAA8C,IAAIG,mBAAJ,CAAeH,cAAf,EAA+B,KAAKL,QAApC,EAA8C,KAAKF,aAAnD,CAA9C;AACD;;AACD,eAAO,KAAKM,sBAAL,CAA4BC,cAA5B,CAAP;AACD;AACF","sourcesContent":["'use strict'\n\nimport Configuration from './Configuration'\nimport ApiCall from './ApiCall'\nimport Collection from './Collection'\nimport MultiSearch from './MultiSearch'\n\nexport default class SearchClient {\n  constructor (options) {\n    options = options || {}\n\n    // In v0.20.0 we restrict query params to 2000 in length\n    // But sometimes scoped API keys can be over this limit, so we send long keys as headers instead.\n    // The tradeoff is that using a header to send the API key will trigger the browser to send an OPTIONS request though.\n    if ((options['apiKey'] || '').length < 2000) {\n      options['sendApiKeyAsQueryParam'] = true\n    }\n\n    this.configuration = new Configuration(options)\n    this._apiCall = new ApiCall(this.configuration)\n    this.multiSearch = new MultiSearch(this._apiCall, this.configuration, true)\n    this._individualCollections = {}\n  }\n\n  collections (collectionName) {\n    if (collectionName === undefined) {\n      throw new Error('Typesense.SearchClient only supports search operations, so the collectionName that needs to ' +\n        'be searched must be specified. Use Typesense.Client if you need to access the collection object.')\n    } else {\n      if (this._individualCollections[collectionName] === undefined) {\n        this._individualCollections[collectionName] = new Collection(collectionName, this._apiCall, this.configuration)\n      }\n      return this._individualCollections[collectionName]\n    }\n  }\n}\n"],"file":"SearchClient.js"}