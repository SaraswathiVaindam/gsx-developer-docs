{"version":3,"sources":["Typesense/MultiSearch.js"],"names":["RESOURCEPATH","MultiSearch","apiCall","configuration","useTextContentType","_apiCall","_configuration","_useTextContentType","_requestWithCache","RequestWithCache","searchRequests","commonParams","cacheSearchResultsForSeconds","additionalHeaders","additionalQueryParams","useServerSideSearchCache","queryParams","Object","assign","perform","post","cacheResponseForSeconds"],"mappings":"AAAA;;;;;;;;;;;;;AAEA;;AAEA,IAAMA,YAAY,GAAG,eAArB;;IAEqBC,W;AACnB,uBAAaC,OAAb,EAAsBC,aAAtB,EAAiE;AAAA,QAA5BC,kBAA4B,uEAAP,KAAO;AAAA;AAC/D,SAAKC,QAAL,GAAgBH,OAAhB;AACA,SAAKI,cAAL,GAAsBH,aAAtB;AACA,SAAKI,mBAAL,GAA2BH,kBAA3B,CAH+D,CAGjB;;AAE9C,SAAKI,iBAAL,GAAyB,IAAIC,yBAAJ,EAAzB;AACD;;;;WAED,iBAASC,cAAT,EAAoI;AAAA,UAA3GC,YAA2G,uEAA5F,EAA4F;;AAAA,qFAAJ,EAAI;AAAA,uCAAvFC,4BAAuF;AAAA,UAAvFA,4BAAuF,sCAAxD,KAAKN,cAAL,CAAoBM,4BAAoC;;AAClI,UAAIC,iBAAiB,GAAG,EAAxB;;AACA,UAAI,KAAKN,mBAAT,EAA8B;AAC5BM,QAAAA,iBAAiB,CAAC,cAAD,CAAjB,GAAoC,YAApC;AACD;;AAED,UAAIC,qBAAqB,GAAG,EAA5B;;AACA,UAAI,KAAKR,cAAL,CAAoBS,wBAApB,KAAiD,IAArD,EAA2D;AACzDD,QAAAA,qBAAqB,CAAC,WAAD,CAArB,GAAqC,IAArC;AACD;;AACD,UAAME,WAAW,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBP,YAAlB,EAAgCG,qBAAhC,CAApB;AAEA,aAAO,KAAKN,iBAAL,CAAuBW,OAAvB,CACL,KAAKd,QADA,EAEL,KAAKA,QAAL,CAAce,IAFT,EAGL,CAACpB,YAAD,EAAeU,cAAf,EAA+BM,WAA/B,EAA4CH,iBAA5C,CAHK,EAIL;AAACQ,QAAAA,uBAAuB,EAAET;AAA1B,OAJK,CAAP;AAMD","sourcesContent":["'use strict'\n\nimport RequestWithCache from './RequestWithCache'\n\nconst RESOURCEPATH = '/multi_search'\n\nexport default class MultiSearch {\n  constructor (apiCall, configuration, useTextContentType = false) {\n    this._apiCall = apiCall\n    this._configuration = configuration\n    this._useTextContentType = useTextContentType // To avoid OPTIONS request\n\n    this._requestWithCache = new RequestWithCache()\n  }\n\n  perform (searchRequests, commonParams = {}, {cacheSearchResultsForSeconds = this._configuration.cacheSearchResultsForSeconds} = {}) {\n    let additionalHeaders = {}\n    if (this._useTextContentType) {\n      additionalHeaders['content-type'] = 'text/plain'\n    }\n\n    let additionalQueryParams = {}\n    if (this._configuration.useServerSideSearchCache === true) {\n      additionalQueryParams['use_cache'] = true\n    }\n    const queryParams = Object.assign({}, commonParams, additionalQueryParams)\n\n    return this._requestWithCache.perform(\n      this._apiCall,\n      this._apiCall.post,\n      [RESOURCEPATH, searchRequests, queryParams, additionalHeaders],\n      {cacheResponseForSeconds: cacheSearchResultsForSeconds}\n    )\n  }\n}\n"],"file":"MultiSearch.js"}