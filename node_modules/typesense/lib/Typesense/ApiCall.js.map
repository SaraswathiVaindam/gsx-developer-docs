{"version":3,"sources":["Typesense/ApiCall.js"],"names":["APIKEYHEADERNAME","HEALTHY","UNHEALTHY","ApiCall","configuration","_configuration","_apiKey","apiKey","_nodes","JSON","parse","stringify","nodes","_nearestNode","nearestNode","_connectionTimeoutSeconds","connectionTimeoutSeconds","_healthcheckIntervalSeconds","healthcheckIntervalSeconds","_numRetriesPerRequest","numRetries","_retryIntervalSeconds","retryIntervalSeconds","_sendApiKeyAsQueryParam","sendApiKeyAsQueryParam","logger","_initializeMetadataForNodes","_currentNodeIndex","endpoint","queryParameters","performRequest","bodyParameters","additionalHeaders","requestType","validate","requestNumber","Date","now","debug","toUpperCase","numTries","node","_getNextNode","index","requestOptions","method","url","_uriFor","headers","Object","assign","_defaultHeaders","timeout","maxContentLength","Infinity","maxBodyLength","validateStatus","status","transformResponse","data","transformedData","undefined","startsWith","keys","length","params","response","_setNodeHealthcheck","Promise","resolve","reject","_customErrorForResponse","message","lastException","warn","code","_timer","isHealthy","_nodeDueForHealthcheck","map","join","candidateNode","i","isDueForHealthcheck","lastAccessTimestamp","forEach","protocol","host","port","path","defaultHeaders","seconds","setTimeout","messageFromServer","CustomErrorKlass","RequestMalformed","RequestUnauthorized","ObjectNotFound","ObjectAlreadyExists","ObjectUnprocessable","ServerError","HTTPError","errorMessage","trim","customErrror","httpStatus"],"mappings":"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","sourcesContent":["'use strict'\nimport axios from 'axios'\nimport {\n  HTTPError,\n  ObjectAlreadyExists,\n  ObjectNotFound,\n  ObjectUnprocessable,\n  RequestMalformed,\n  RequestUnauthorized,\n  ServerError\n} from './Errors'\n\nconst APIKEYHEADERNAME = 'X-TYPESENSE-API-KEY'\nconst HEALTHY = true\nconst UNHEALTHY = false\n\nexport default class ApiCall {\n  constructor (configuration) {\n    this._configuration = configuration\n\n    this._apiKey = this._configuration.apiKey\n    this._nodes = JSON.parse(JSON.stringify(this._configuration.nodes)) // Make a copy, since we'll be adding additional metadata to the nodes\n    this._nearestNode = JSON.parse(JSON.stringify(this._configuration.nearestNode))\n    this._connectionTimeoutSeconds = this._configuration.connectionTimeoutSeconds\n    this._healthcheckIntervalSeconds = this._configuration.healthcheckIntervalSeconds\n    this._numRetriesPerRequest = this._configuration.numRetries\n    this._retryIntervalSeconds = this._configuration.retryIntervalSeconds\n    this._sendApiKeyAsQueryParam = this._configuration.sendApiKeyAsQueryParam\n\n    this.logger = this._configuration.logger\n\n    this._initializeMetadataForNodes()\n    this._currentNodeIndex = -1\n  }\n\n  get (endpoint, queryParameters = {}) {\n    return this.performRequest('get', endpoint, {queryParameters})\n  }\n\n  delete (endpoint, queryParameters = {}) {\n    return this.performRequest('delete', endpoint, {queryParameters})\n  }\n\n  post (endpoint, bodyParameters = {}, queryParameters = {}, additionalHeaders = {}) {\n    return this.performRequest('post', endpoint, {queryParameters, bodyParameters, additionalHeaders})\n  }\n\n  put (endpoint, bodyParameters = {}, queryParameters = {}) {\n    return this.performRequest('put', endpoint, {queryParameters, bodyParameters})\n  }\n\n  patch (endpoint, bodyParameters = {}, queryParameters = {}) {\n    return this.performRequest('patch', endpoint, {queryParameters, bodyParameters})\n  }\n\n  async performRequest (requestType, endpoint, {\n    queryParameters = null,\n    bodyParameters = null,\n    additionalHeaders = {}\n  }) {\n    this\n      ._configuration\n      .validate()\n\n    const requestNumber = Date.now()\n    let lastException\n    this.logger.debug(`Request #${requestNumber}: Performing ${requestType.toUpperCase()} request: ${endpoint}`)\n    for (let numTries = 1; numTries <= this._numRetriesPerRequest + 1; numTries++) {\n      let node = this._getNextNode(requestNumber)\n      this.logger.debug(`Request #${requestNumber}: Attempting ${requestType.toUpperCase()} request Try #${numTries} to Node ${node.index}`)\n      try {\n        let requestOptions = {\n          method: requestType,\n          url: this._uriFor(endpoint, node),\n          headers: Object.assign({}, this._defaultHeaders(), additionalHeaders),\n          timeout: this._connectionTimeoutSeconds * 1000,\n          maxContentLength: Infinity,\n          maxBodyLength: Infinity,\n          validateStatus: (status) => {\n            /* Override default validateStatus, which only considers 2xx a success.\n                In our case, if the server returns any HTTP code, we will handle it below.\n                We do this to be able to raise custom errors based on response code.\n             */\n            return status > 0\n          },\n          transformResponse: [(data, headers) => {\n            let transformedData = data\n            if (headers !== undefined && typeof data === 'string' && headers['content-type'] && headers['content-type'].startsWith('application/json')) {\n              transformedData = JSON.parse(data)\n            }\n            return transformedData\n          }]\n        }\n\n        if (queryParameters && Object.keys(queryParameters).length !== 0) {\n          requestOptions.params = queryParameters\n        }\n\n        if (this._sendApiKeyAsQueryParam) {\n          requestOptions.params = requestOptions.params || {}\n          requestOptions.params['x-typesense-api-key'] = this._apiKey\n        }\n\n        if (bodyParameters && Object.keys(bodyParameters).length !== 0) {\n          requestOptions.data = bodyParameters\n        }\n\n        let response = await axios(requestOptions)\n        if (response.status >= 1 && response.status <= 499) {\n          // Treat any status code > 0 and < 500 to be an indication that node is healthy\n          // We exclude 0 since some clients return 0 when request fails\n          this._setNodeHealthcheck(node, HEALTHY)\n        }\n        this.logger.debug(`Request #${requestNumber}: Request to Node ${node.index} was made. Response Code was ${response.status}.`)\n\n        if (response.status >= 200 && response.status < 300) {\n          // If response is 2xx return a resolved promise\n          return Promise.resolve(response.data)\n        } else if (response.status < 500) {\n          // Next, if response is anything but 5xx, don't retry, return a custom error\n          return Promise.reject(this._customErrorForResponse(response, response.data.message))\n        } else {\n          // Retry all other HTTP errors (HTTPStatus > 500)\n          // This will get caught by the catch block below\n          throw this._customErrorForResponse(response, response.data.message)\n        }\n      } catch (error) {\n        // This block handles retries for HTTPStatus > 500 and network layer issues like connection timeouts\n        this._setNodeHealthcheck(node, UNHEALTHY)\n        lastException = error\n        this.logger.warn(`Request #${requestNumber}: Request to Node ${node.index} failed due to \"${error.code} ${error.message}${error.response == null ? '' : ' - ' + JSON.stringify(error.response.data)}\"`)\n        // this.logger.debug(error.stack)\n        this.logger.warn(`Request #${requestNumber}: Sleeping for ${this._retryIntervalSeconds}s and then retrying request...`)\n        await this._timer(this._retryIntervalSeconds)\n      }\n    }\n    this.logger.debug(`Request #${requestNumber}: No retries left. Raising last error`)\n    return Promise.reject(lastException)\n  }\n\n  // Attempts to find the next healthy node, looping through the list of nodes once.\n  //   But if no healthy nodes are found, it will just return the next node, even if it's unhealthy\n  //     so we can try the request for good measure, in case that node has become healthy since\n  _getNextNode (requestNumber = 0) {\n    // Check if nearestNode is set and is healthy, if so return it\n    if (this._nearestNode != null) {\n      this.logger.debug(`Request #${requestNumber}: Nodes Health: Node ${this._nearestNode.index} is ${this._nearestNode.isHealthy === true ? 'Healthy' : 'Unhealthy'}`)\n      if (this._nearestNode.isHealthy === true || this._nodeDueForHealthcheck(this._nearestNode, requestNumber)) {\n        this.logger.debug(`Request #${requestNumber}: Updated current node to Node ${this._nearestNode.index}`)\n        return this._nearestNode\n      }\n      this.logger.debug(`Request #${requestNumber}: Falling back to individual nodes`)\n    }\n\n    // Fallback to nodes as usual\n    this.logger.debug(`Request #${requestNumber}: Nodes Health: ${this._nodes.map(node => `Node ${node.index} is ${node.isHealthy === true ? 'Healthy' : 'Unhealthy'}`).join(' || ')}`)\n    let candidateNode\n    for (let i = 0; i <= this._nodes.length; i++) {\n      this._currentNodeIndex = (this._currentNodeIndex + 1) % this._nodes.length\n      candidateNode = this._nodes[this._currentNodeIndex]\n      if (candidateNode.isHealthy === true || this._nodeDueForHealthcheck(candidateNode, requestNumber)) {\n        this.logger.debug(`Request #${requestNumber}: Updated current node to Node ${candidateNode.index}`)\n        return candidateNode\n      }\n    }\n\n    // None of the nodes are marked healthy, but some of them could have become healthy since last health check.\n    //  So we will just return the next node.\n    this.logger.debug(`Request #${requestNumber}: No healthy nodes were found. Returning the next node, Node ${candidateNode.index}`)\n    return candidateNode\n  }\n\n  _nodeDueForHealthcheck (node, requestNumber = 0) {\n    const isDueForHealthcheck = Date.now() - node.lastAccessTimestamp > (this._healthcheckIntervalSeconds * 1000)\n    if (isDueForHealthcheck) {\n      this.logger.debug(`Request #${requestNumber}: Node ${node.index} has exceeded healtcheckIntervalSeconds of ${this._healthcheckIntervalSeconds}. Adding it back into rotation.`)\n    }\n    return isDueForHealthcheck\n  }\n\n  _initializeMetadataForNodes () {\n    if (this._nearestNode != null) {\n      this._nearestNode.index = 'nearestNode'\n      this._setNodeHealthcheck(this._nearestNode, HEALTHY)\n    }\n\n    this._nodes.forEach((node, i) => {\n      node.index = i\n      this._setNodeHealthcheck(node, HEALTHY)\n    })\n  }\n\n  _setNodeHealthcheck (node, isHealthy) {\n    node.isHealthy = isHealthy\n    node.lastAccessTimestamp = Date.now()\n  }\n\n  _uriFor (endpoint, node) {\n    return `${node.protocol}://${node.host}:${node.port}${node.path}${endpoint}`\n  }\n\n  _defaultHeaders () {\n    let defaultHeaders = {}\n    if (!this._sendApiKeyAsQueryParam) {\n      defaultHeaders[APIKEYHEADERNAME] = this._apiKey\n    }\n    defaultHeaders['Content-Type'] = 'application/json'\n    return defaultHeaders\n  }\n\n  async _timer (seconds) {\n    return new Promise(resolve => setTimeout(resolve, seconds * 1000))\n  }\n\n  _customErrorForResponse (response, messageFromServer) {\n    let CustomErrorKlass\n    if (response.status === 400) {\n      CustomErrorKlass = RequestMalformed\n    } else if (response.status === 401) {\n      CustomErrorKlass = RequestUnauthorized\n    } else if (response.status === 404) {\n      CustomErrorKlass = ObjectNotFound\n    } else if (response.status === 409) {\n      CustomErrorKlass = ObjectAlreadyExists\n    } else if (response.status === 422) {\n      CustomErrorKlass = ObjectUnprocessable\n    } else if (response.status >= 500 && response.status <= 599) {\n      CustomErrorKlass = ServerError\n    } else {\n      CustomErrorKlass = HTTPError\n    }\n\n    let errorMessage = `Request failed with HTTP code ${response.status}`\n    if (typeof messageFromServer === 'string' && messageFromServer.trim() !== '') {\n      errorMessage += ` | Server said: ${messageFromServer}`\n    }\n\n    const customErrror = new CustomErrorKlass(errorMessage)\n    customErrror.httpStatus = response.status\n\n    return customErrror\n  }\n}\n"],"file":"ApiCall.js"}